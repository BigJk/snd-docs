"use strict";(self.webpackChunksnd_docs_ds=self.webpackChunksnd_docs_ds||[]).push([[389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,k=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={},o="Nunjucks Filter & Extensions",s={unversionedId:"templating/nunjucks-filter",id:"templating/nunjucks-filter",title:"Nunjucks Filter & Extensions",description:"Sales & Dungeons contain additional filters and extensions for the Nunjucks templating. All the build-in's can be found here: Templating Documentation.",source:"@site/docs/templating/nunjucks-filter.md",sourceDirName:"templating",slug:"/templating/nunjucks-filter",permalink:"/docs/templating/nunjucks-filter",draft:!1,editUrl:"https://github.com/BigJk/snd-docs/docs/templating/nunjucks-filter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generator",permalink:"/docs/templating/generator"},next:{title:"Advanced",permalink:"/docs/advanced/"}},l={},u=[{value:"Filters",id:"filters",level:2},{value:"Markdown",id:"markdown",level:3},{value:"JSON",id:"json",level:3},{value:"Source",id:"source",level:3},{value:"Using linked sources in generator",id:"using-linked-sources-in-generator",level:4},{value:"Getting source content into Javascript",id:"getting-source-content-into-javascript",level:4},{value:"Extensions",id:"extensions",level:2},{value:"JSON Data",id:"json-data",level:3},{value:"Javascript Execution",id:"javascript-execution",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nunjucks-filter--extensions"},"Nunjucks Filter & Extensions"),(0,r.kt)("p",null,"Sales & Dungeons contain additional filters and extensions for the Nunjucks templating. All the build-in's can be found here: ",(0,r.kt)("a",{parentName:"p",href:"https://mozilla.github.io/nunjucks/templating.html"},"Templating Documentation"),"."),(0,r.kt)("h2",{id:"filters"},"Filters"),(0,r.kt)("h3",{id:"markdown"},"Markdown"),(0,r.kt)("p",null,"Markdown parsing is possible with the ",(0,r.kt)("inlineCode",{parentName:"p"},"markdown")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"markdowni")," filters. The ",(0,r.kt)("inlineCode",{parentName:"p"},"markdowni")," filter will return inline markdown, which means no line-breaks and paragraph margins. Uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/markdown-it/markdown-it"},"markdown-it")," and has markdown table support enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{{ it.some_data | markdown }}\n{{ it.some_data | markdowni }}\n")),(0,r.kt)("h3",{id:"json"},"JSON"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," filter encodes the data as JSON which can help in debugging problems with a template or passing data to some javascript you want to execute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{{ it.some_data | json }}\n")),(0,r.kt)("h3",{id:"source"},"Source"),(0,r.kt)("p",null,"Fetch sources by id from inside your template with the ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," filter. This is useful in generators to fetch a source that was selected by the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{{ config.data_source.selected | source }}\n{{ "ds:BigJk+open5e-monsters" | source }}\n\n{% for item in "ds:BigJk+open5e-monsters" | source %}\n   ...\n{% endfor %}\n')),(0,r.kt)("h4",{id:"using-linked-sources-in-generator"},"Using linked sources in generator"),(0,r.kt)("p",null,"If you want to use a linked source in a generator, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sources")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{% for sourceName in sources %}\n  {% for item in sourceName | source %}\n    ...\n  {% endfor %}\n{% endfor %}\n")),(0,r.kt)("h4",{id:"getting-source-content-into-javascript"},"Getting source content into Javascript"),(0,r.kt)("p",null,"You can also get the source content into a javascript variable with the help of the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sources = JSON.parse({{ sources | json }});\n")),(0,r.kt)("h2",{id:"extensions"},"Extensions"),(0,r.kt)("h3",{id:"json-data"},"JSON Data"),(0,r.kt)("p",null,"You can add JSON data as new Nunjucks variables. This might be useful if JSON wants to be embedded as some kind of static data for the template. The variable the data will be saved to can be specified (",(0,r.kt)("inlineCode",{parentName:"p"},"some_var")," in the example)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% data "some_var" %}\n    {\n        "test": "some data",\n        "number": 123\n    }\n{% enddata %}\n\n{{ some_var.test }}\n{{ some_var.number }}\n')),(0,r.kt)("h3",{id:"javascript-execution"},"Javascript Execution"),(0,r.kt)("p",null,"If you want to execute some javascript on the data within Nunjucks instead of dynamically in the HTML (",(0,r.kt)("inlineCode",{parentName:"p"},"<script>...<\/script>"),") you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"js")," extension. The extension expects a valid javascript function that takes 1 argument. The argument is a variable containing all the nunjucks variables. The function should return a value. That value will be saved to the nunjucks variable specified (",(0,r.kt)("inlineCode",{parentName:"p"},"some_var")," in the example)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{% js "some_var" %}\n    (state) => {\n        // can access state.it, state.images, state.entries and any other nunjucks variables defined before this point.\n        return state.it.test.map(t => t.num + 1)\n    }\n{% endjs %}\n\n{% for item in some_var %}\n    ...\n{% endfor %}\n')))}d.isMDXComponent=!0}}]);